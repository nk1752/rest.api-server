# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: build test and deploy

on:
  workflow_dispatch:

env:
  ACR_RESOURCE_GROUP: cluster-dev-rg
  AZURE_CONTAINER_REGISTRY: vhacr1
  CLUSTER_NAME: cluster-dev
  CLUSTER_RESOURCE_GROUP: cluster-dev-rg
  RESOURCE_GROUP: cluster-dev-rg
  CONTAINER_NAME: restapiserver
  NAMESPACE: rest-api-namespace
  DEV_TAG: latest
  DEPLOYMENT_MANIFEST_PATH: manifest


jobs:

  build_push_image:
    runs-on: ubuntu-latest

    permissions:
            contents: read
            id-token: write

    steps:
    - name: Azure Login
      uses: azure/login@v1.4.6
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }} 
    
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean install -f pom.xml -DskipTests
      # run: mvn -B package --file pom.xml -DskipTests
  
    - name: root dir
      run: pwd

    - name: root dir list
      run: ls

    - name: target dir
      run: cd target && ls


    - name: build and push image to ACR
      run: |
        az acr build \
        --image ${{ env.CONTAINER_NAME }}:${{ env.DEV_TAG }} \
        --registry ${{ env.AZURE_CONTAINER_REGISTRY }} \
        --build-arg JAR_FILE=./target/rest-api-server-0.0.1.jar \
        -g ${{ env.ACR_RESOURCE_GROUP }} \
        -f ./dockerfile/Dockerfile.dev .


  deploy_manifest:
    runs-on: ubuntu-latest

    permissions:
            contents: read
            id-token: write

    needs: [build_push_image]

    steps:
    - name: Azure Login
      uses: azure/login@v1.4.6
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }} 

      # Use kubelogin to configure your kubeconfig for Azure auth
    - name: Set up kubelogin for non-interactive login
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}
        admin: 'false'
        use-kubelogin: 'true'

    - name: root dir
      run: pwd

    - name: root dir list
      run: ls

    - name: target dir
      run: cd target && ls

      # Deploys application based on given manifest file
    - name: Deploys application
      uses: Azure/k8s-deploy@v4
      with:
        action: deploy
        namespace: ${{ env.NAMESPACE }}
        manifests: |
          manifest/api-deployment.yml
          manifest/api-service.yml
          manifest/api-ingress.yml
        images: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ env.DEV_TAG }}

  
        
          


